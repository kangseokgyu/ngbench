// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: proto/ngbench.proto

package ngbench

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NGBenchServiceClient is the client API for NGBenchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NGBenchServiceClient interface {
	ReportResult(ctx context.Context, opts ...grpc.CallOption) (NGBenchService_ReportResultClient, error)
	ReportDeauthTimestampResult(ctx context.Context, opts ...grpc.CallOption) (NGBenchService_ReportDeauthTimestampResultClient, error)
}

type nGBenchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNGBenchServiceClient(cc grpc.ClientConnInterface) NGBenchServiceClient {
	return &nGBenchServiceClient{cc}
}

func (c *nGBenchServiceClient) ReportResult(ctx context.Context, opts ...grpc.CallOption) (NGBenchService_ReportResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &NGBenchService_ServiceDesc.Streams[0], "/ngbench.NGBenchService/ReportResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &nGBenchServiceReportResultClient{stream}
	return x, nil
}

type NGBenchService_ReportResultClient interface {
	Send(*Result) error
	CloseAndRecv() (*ResultReply, error)
	grpc.ClientStream
}

type nGBenchServiceReportResultClient struct {
	grpc.ClientStream
}

func (x *nGBenchServiceReportResultClient) Send(m *Result) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nGBenchServiceReportResultClient) CloseAndRecv() (*ResultReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResultReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nGBenchServiceClient) ReportDeauthTimestampResult(ctx context.Context, opts ...grpc.CallOption) (NGBenchService_ReportDeauthTimestampResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &NGBenchService_ServiceDesc.Streams[1], "/ngbench.NGBenchService/ReportDeauthTimestampResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &nGBenchServiceReportDeauthTimestampResultClient{stream}
	return x, nil
}

type NGBenchService_ReportDeauthTimestampResultClient interface {
	Send(*DeauthTimestampResult) error
	CloseAndRecv() (*DeauthTimestampResultReply, error)
	grpc.ClientStream
}

type nGBenchServiceReportDeauthTimestampResultClient struct {
	grpc.ClientStream
}

func (x *nGBenchServiceReportDeauthTimestampResultClient) Send(m *DeauthTimestampResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nGBenchServiceReportDeauthTimestampResultClient) CloseAndRecv() (*DeauthTimestampResultReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeauthTimestampResultReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NGBenchServiceServer is the server API for NGBenchService service.
// All implementations must embed UnimplementedNGBenchServiceServer
// for forward compatibility
type NGBenchServiceServer interface {
	ReportResult(NGBenchService_ReportResultServer) error
	ReportDeauthTimestampResult(NGBenchService_ReportDeauthTimestampResultServer) error
	mustEmbedUnimplementedNGBenchServiceServer()
}

// UnimplementedNGBenchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNGBenchServiceServer struct {
}

func (UnimplementedNGBenchServiceServer) ReportResult(NGBenchService_ReportResultServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportResult not implemented")
}
func (UnimplementedNGBenchServiceServer) ReportDeauthTimestampResult(NGBenchService_ReportDeauthTimestampResultServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportDeauthTimestampResult not implemented")
}
func (UnimplementedNGBenchServiceServer) mustEmbedUnimplementedNGBenchServiceServer() {}

// UnsafeNGBenchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NGBenchServiceServer will
// result in compilation errors.
type UnsafeNGBenchServiceServer interface {
	mustEmbedUnimplementedNGBenchServiceServer()
}

func RegisterNGBenchServiceServer(s grpc.ServiceRegistrar, srv NGBenchServiceServer) {
	s.RegisterService(&NGBenchService_ServiceDesc, srv)
}

func _NGBenchService_ReportResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NGBenchServiceServer).ReportResult(&nGBenchServiceReportResultServer{stream})
}

type NGBenchService_ReportResultServer interface {
	SendAndClose(*ResultReply) error
	Recv() (*Result, error)
	grpc.ServerStream
}

type nGBenchServiceReportResultServer struct {
	grpc.ServerStream
}

func (x *nGBenchServiceReportResultServer) SendAndClose(m *ResultReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nGBenchServiceReportResultServer) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NGBenchService_ReportDeauthTimestampResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NGBenchServiceServer).ReportDeauthTimestampResult(&nGBenchServiceReportDeauthTimestampResultServer{stream})
}

type NGBenchService_ReportDeauthTimestampResultServer interface {
	SendAndClose(*DeauthTimestampResultReply) error
	Recv() (*DeauthTimestampResult, error)
	grpc.ServerStream
}

type nGBenchServiceReportDeauthTimestampResultServer struct {
	grpc.ServerStream
}

func (x *nGBenchServiceReportDeauthTimestampResultServer) SendAndClose(m *DeauthTimestampResultReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nGBenchServiceReportDeauthTimestampResultServer) Recv() (*DeauthTimestampResult, error) {
	m := new(DeauthTimestampResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NGBenchService_ServiceDesc is the grpc.ServiceDesc for NGBenchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NGBenchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ngbench.NGBenchService",
	HandlerType: (*NGBenchServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportResult",
			Handler:       _NGBenchService_ReportResult_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReportDeauthTimestampResult",
			Handler:       _NGBenchService_ReportDeauthTimestampResult_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/ngbench.proto",
}
